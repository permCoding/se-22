
Route paths can also be string patterns. 
String patterns use a form of regular expression syntax to define patterns 
of endpoints that will be matched. 
The syntax is listed below 
(note that the hyphen (-) and the dot (.) are interpreted literally by string-based paths):

?: The endpoint must have 0 or 1 of the preceding character (or group), 
   e.g. a route path of '/ab?cd' will match endpoints acd or abcd.  

+: The endpoint must have 1 or more of the preceding character (or group), 
   e.g. a route path of '/ab+cd' will match endpoints abcd, abbcd, abbbcd, and so on.  

*: The endpoint may have an arbitrary string where the * character is placed. 
   E.g. a route path of '/ab*cd' will match endpoints abcd, abXcd, abSOMErandomTEXTcd, and so on.

(): Grouping match on a set of characters to perform another operation on, 
   e.g. '/ab(cd)?e' will perform a ?-match on the group (cd) — it will match abe and abcde.

---  

The route paths can also be JavaScript regular expressions. For example, the route 
path below will match catfish and dogfish, but not catflap, catfishhead, and so on. 
Note that the path for a regular expression uses regular expression syntax 
(it is not a quoted string as in the previous cases).

```js
app.get(/.*fish$/, function (req, res) {
  // …
});
```
